===========================
Laravel CRUD Generator API
===========================
1.- Crear una carpeta con el nombre del proyectoen la carpeta www de laragon.

2.- Crear un proyecto nuevo en laravel:

	composer create-project laravel/laravel .

3.- Configurar con cual base de datos va ha conectar
	en el archivo .env (Si es MySQL usa esta configuración)
	
	DB_CONNECTION=mysql
	DB_HOST=127.0.0.1
	DB_PORT=3306
	DB_DATABASE=name_database
	DB_USERNAME=user_database
	DB_PASSWORD=password_database
	
4.- Ejecutar el comando:
	
	php artisan migrate

5.- Ejecutar el comando: 

	php artisan install:api

6.- En el Model User.php agregar el trait HasApiTokens
	y importa el paquete:

	use Laravel\Sanctum\HasApiTokens;
	
7.- Instalar el paquete CRUD Generator:

	composer require ibex/crud-generator --dev
	
8.- Publicar la configuración del paquete predeterminado (opcional)

	php artisan vendor:publish --tag=crud
	
9.- Ejecutar este comando para crear el CRUD

	php artisan make:crud productos api
	
10.- Crea la ruta en el archivo api.php que esta en la carpeta routes

	Route::apiResource('productos', ProductoController::class);
	
	Importa el paquete:
	
	use App\Http\Controllers\Api\ProductoController;
	
11.- Ver en listado de las rutas de la API:

	php artisan route:list
	
12.- Ejecuta el servidor de laravel con el comando:

	php artisan serve
	
================================================================
Scramble – Generador de documentación Laravel OpenAPI (Swagger)
================================================================

1.- Puedes instalar Scramble a través del compositor:

	composer require dedoc/scramble
	
2.- De manera opcional, puedes publicar el archivo de configuración del paquete:

	php artisan vendor:publish --provider="Dedoc\Scramble\ScrambleServiceProvider" --tag="scramble-config"
	
3.- Cuando se instala Scramble, se agregan 2 rutas a su aplicación:

	/docs/api -> Visor de interfaz de usuario para su documentación
	
	/docs/api.json -> Abra el documento API en formato JSON que describe su API.
	
==============================================
Laravel 11 API Passport Authentication
==============================================

1.- Activar en las extensiones de PHP sodium

2.- Instalar el paquete lcobucci/jwt:

	composer require lcobucci/jwt:^5.0
	
3.- Verificar si esta instalado el paquete lcobucci/jwt:

	composer show lcobucci/jwt
	
4.- Instalar el paquete passport:

	composer require laravel/passport
	
5.- Generar claves de cifrado:

	php artisan passport:install
	
6.- Configurar el modelo de usuario:

	use Laravel\Passport\HasApiTokens;

	class User extends Authenticatable
	{
		use HasApiTokens, Notifiable;
	}
	
7.- Configurar Guards en config/auth.php:

    'api' => [
        'driver' => 'passport',
        'provider' => 'users',
    ],
	
8.-  Agregar las rutas de Passport dentro de tu archivo AppServiceProvider.php:

	<?php

	namespace App\Providers;

	use Illuminate\Support\ServiceProvider;
	use Illuminate\Support\Facades\Schema;
	use Laravel\Passport\Passport;

	class AppServiceProvider extends ServiceProvider
	{
		
		public function register(): void
		{
			Passport::ignoreRoutes();

		}

		public function boot(): void
		{

		}
	}
	
	
9.- Cree el controlador usando el siguiente comando:

	php artisan make:controller Api/AuthController
	
10.- Crear los siguientes métodos en el controlador Api/AuthController:

    public function register(Request $request)
    {
        $registerdData = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8',
        ]);

        $user = User::create($registerdData);

        $token = $user->createToken('auth_token');

        return response()->json([
            'access_token' => $token,
            'token_type' => 'Bearer',
        ]);
    }

    public function login(Request $request)
    {
        $request->validate([
            'email' => 'required|string|email',
            'password' => 'required|string',
        ]);

        if (!Auth::attempt($request->only('email', 'password'))) {
            return response()->json(['message' => 'Credenciales inválidas'], 401);
        }

        $user = $request->user();
        $token = $user->createToken('auth_token');

        return response()->json([
            'access_token' => $token,
            'token_type' => 'Bearer',
        ]);
    }

    public function logout(Request $request)
    {
        $request->user()->token()->revoke();

        return response()->json([
            'message' => 'Sesión cerrada correctamente',
        ]);
    }
    
    public function user(Request $request)
    {
        return response()->json($request->user());
    }